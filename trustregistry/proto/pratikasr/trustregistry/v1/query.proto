syntax = "proto3";
package pratikasr.trustregistry.v1;

option go_package = "github.com/pratikasr/trustregistry";

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "pratikasr/trustregistry/v1/types.proto";

// Query defines the gRPC querier service.
service Query {
  // GetTrustRegistry returns the trust registry information.
  rpc GetTrustRegistry(QueryGetTrustRegistryRequest) returns (QueryGetTrustRegistryResponse) {
    option (google.api.http).get = "/trustregistry/v1/trust_registry/{did}";
  }

  // Params returns the current module parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/trustregistry/v1/params";
  }
}

// QueryGetTrustRegistryRequest is the request type for the Query/GetTrustRegistry RPC method.
message QueryGetTrustRegistryRequest {
  string did = 1;
  bool active_gf_only = 2;
  string preferred_language = 3;
}

// QueryGetTrustRegistryResponse is the response type for the Query/GetTrustRegistry RPC method.
message QueryGetTrustRegistryResponse {
  TrustRegistry trust_registry = 1;
  repeated GovernanceFrameworkVersion versions = 2[(gogoproto.nullable) = false];
  repeated GovernanceFrameworkDocument documents = 3[(gogoproto.nullable) = false];
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}